@import "functions";
/*
	Media queries

	@usage —
	.element {
		@include screen('tablet') {
			width: 90%;
		}
		@include screen('desktop') {
			width: 85%;
		}
		@include screen('(min-width: 999px)') {
			width: 1280px;
		}
	}
 */
@mixin screen($size) {
	
	$mediaQueries: (
		'desktop': '(min-width: 1025px)',
		'nonDesktop': '(max-width: 1024px)',
		'tablet': '(min-width: 768px) and (max-width: 1024px)',
		'tablet-portrait': '(min-width: 768px) and (max-width: 1024px) and (orientation: portrait)',
		'mobile': '(max-width: 767px)',
		'mobile-landscape': '(max-width: 767px) and (orientation: landscape)',
		'nonMobile': '(min-width: 768px)',
	);
	
	// Use predefined media query
	@each $key, $value in $mediaQueries {
		@if $key == $size {
			@media only screen and #{$value} {
				@content;
			}
		}
	}
	
	// Use custom media query
	@if map-has-key($mediaQueries, $size) != true {
		@media only screen and #{$size} {
			@content;
		}
	}
}

@mixin retina($x: 3) {
	@media
	only screen and (-webkit-min-device-pixel-ratio: $x),
	only screen and (min-device-pixel-ratio: $x) {
		@content;
	}
}

/*
	@usage —
	.menu li {
		@include relative;
	}
	.sub-menu {
		@include absolute(top 100% left 0);
	}
	.sticky-bar {
		@include fixed(top 0 left 0);
	}
*/
@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);
		@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
			#{$o}: nth($args, $i + 1);
		}
	}
	position: $position;
}
@mixin absolute($args: '') {
	@include position(absolute, $args);
}
@mixin fixed($args: '') {
	@include position(fixed, $args);
}
@mixin relative($args: '') {
	@include position(relative, $args);
}


@mixin center() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin centerX() {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

@mixin centerY() {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}


@mixin clearfix {
	&:before,
	&:after {
		display: table;
		content: "";
	}
	
	&:after {
		clear: both;
	}
}

@mixin no-drag {
	-webkit-user-drag: none;
	-khtml-user-drag: none;
	-moz-user-drag: none;
	-o-user-drag: none;
	user-drag: none;
}

@mixin nl {
	margin: 0;
	padding: 0;
	text-indent: 0;
	list-style: none;
	list-style-position: outside;
}

@mixin selection {
	& ::selection {
		@content;
	}
	& ::-moz-selection {
		@content;
	}
}

@mixin placeholder-color($color) {
	&.placeholder {
		color: $color;
	}
	&::-moz-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}

@mixin unselectable() {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

/* *
* - Grid system
*
* - Two types:
    - 1. grid with floats (default)
    - 2. inline - grid with inline-blocks
*
* - @{link - http://thesassway.com/intermediate/simple-grid-mixins}
* */
@mixin row ($inline: false) {
	@if $inline {
		font-size: 0;
	} @else {
		@include clearfix();
	}
}

@mixin col (
	$col,
	$sum,
	$gap    : 1em,
	$first  : false,
	$last   : false,
	$inline : false,
	$align  : top,
	$fluid  : false,
	$float  : right
) {
	
	width: 100%;
	padding-left: if($first, 0, $gap);
	padding-right: if($last, 0, $gap);
	
	@if $inline {
		display: inline-block;
		font-size: $gap;
	} @else {
		float: $float;
	}
	
	@if $fluid {
		width: percentage($col/$sum);
	}
	
	@media only screen and (min-width: 768px) {
		width: percentage($col/$sum);
		vertical-align: if($inline, $align, initial);
	}
	
}
